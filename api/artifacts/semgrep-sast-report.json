{"errors": [{"code": 3, "level": "warn", "message": "Syntax error at line artifacts/semgrep-sast-report.json:1:\n missing element", "path": "artifacts/semgrep-sast-report.json", "type": "Syntax error"}, {"code": 3, "level": "warn", "message": "Syntax error at line artifacts/gitleaks-secrets-report.json:1:\n missing element", "path": "artifacts/gitleaks-secrets-report.json", "type": "Syntax error"}], "interfile_languages_used": [], "paths": {"scanned": [".DS_Store", ".vscode/launch.json", "Dockerfile", "artifacts/clamav-virus-report.txt", "artifacts/gatecheck-bundle.tar.gz", "artifacts/gitleaks-secrets-report.json", "artifacts/semgrep-sast-report.json", "deployment-api.yaml", "package-lock.json", "package.json", "server.js", "service-api.yaml"]}, "results": [{"check_id": "dockerfile.security.missing-user.missing-user", "end": {"col": 28, "line": 13, "offset": 138}, "extra": {"engine_kind": "OSS", "fingerprint": "7b2b3b176370faa5dd3f897b200168e235f88741f9c4af7f6ed95673df1ebe2de925fd5833a2a6e344f55f2bad485722a353329aa9da30cb76a8cc97885241f1_0", "fix": "USER non-root\nCMD [ \"node\", \"server.js\" ]", "is_ignored": false, "lines": "CMD [ \"node\", \"server.js\" ]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 20148, "rule_id": "AbUN06", "rv_id": 833486, "url": "https://semgrep.dev/playground/r/nWTy4lK/dockerfile.security.missing-user.missing-user", "version_id": "nWTy4lK"}}, "shortlink": "https://sg.run/Gbvn", "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"node\"\"server.js\"]", "end": {"col": 28, "line": 13, "offset": 138}, "start": {"col": 5, "line": 13, "offset": 115}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "Dockerfile", "start": {"col": 1, "line": 13, "offset": 111}}, {"check_id": "yaml.kubernetes.security.run-as-non-root.run-as-non-root", "end": {"col": 9, "line": 15, "offset": 254}, "extra": {"engine_kind": "OSS", "fingerprint": "172ff821edb7caa56c840a17e775210a968670c7e2b380e07e5bbb84146e859b010016769c2e685af624ac823da7102075588b6024e5ac1278a082f2ede15413_0", "fix": "spec:\n      securityContext:\n        runAsNonRoot: true #", "is_ignored": false, "lines": "    spec:", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10134, "rule_id": "ZqUqeK", "rv_id": 835331, "url": "https://semgrep.dev/playground/r/2KT7O6O/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "version_id": "2KT7O6O"}}, "shortlink": "https://sg.run/dgP5", "source": "https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "subcategory": ["audit"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$1": {"abstract_content": "spec", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$SPEC": {"abstract_content": "spec", "end": {"col": 9, "line": 15, "offset": 254}, "start": {"col": 5, "line": 15, "offset": 250}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "deployment-api.yaml", "start": {"col": 5, "line": 15, "offset": 250}}, {"check_id": "yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "end": {"col": 13, "line": 17, "offset": 286}, "extra": {"engine_kind": "OSS", "fingerprint": "f3f2bde826ec26cbcf9beb7f0c7d12768a3128655710576ac339e18c740dccb2ba9f348616c4cdbb9a70a1abec4d11840c435152dee7658c53f65bb82d0c5f8c_0", "fix": "securityContext:\n          allowPrivilegeEscalation: false\n        name", "is_ignored": false, "lines": "      - name: hello-world-k8s-api", "message": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 47276, "rule_id": "WAU5J6", "rv_id": 835317, "url": "https://semgrep.dev/playground/r/RGTKxwB/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "version_id": "RGTKxwB"}}, "shortlink": "https://sg.run/eleR", "source": "https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "subcategory": ["vuln"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$CONTAINER": {"abstract_content": "hello-world-k8s-api", "end": {"col": 34, "line": 17, "offset": 307}, "start": {"col": 15, "line": 17, "offset": 288}}, "$NAME": {"abstract_content": "name", "end": {"col": 13, "line": 17, "offset": 286}, "start": {"col": 9, "line": 17, "offset": 282}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "deployment-api.yaml", "start": {"col": 9, "line": 17, "offset": 282}}, {"check_id": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage", "end": {"col": 22, "line": 4, "offset": 88}, "extra": {"engine_kind": "OSS", "fingerprint": "4bf26adc5ea4b1a4bec52c89826059c6eea3d51b7c7621b4c991918eaff403bdafc3b9be96102c21d2d4a5e0f997621abb174aa932c210e1edd6008eaa102ac5_0", "is_ignored": false, "lines": "const app = express();", "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://www.npmjs.com/package/csurf", "https://www.npmjs.com/package/csrf", "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 22551, "rule_id": "wdUKEq", "rv_id": 834059, "url": "https://semgrep.dev/playground/r/5PTyDGX/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage", "version_id": "5PTyDGX"}}, "shortlink": "https://sg.run/BxzR", "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage", "subcategory": ["audit"], "technology": ["javascript", "typescript", "express"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$APP": {"abstract_content": "app", "end": {"col": 10, "line": 4, "offset": 76}, "start": {"col": 7, "line": 4, "offset": 73}}, "$EXPRESS": {"abstract_content": "express", "end": {"col": 20, "line": 4, "offset": 86}, "start": {"col": 13, "line": 4, "offset": 79}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "server.js", "start": {"col": 7, "line": 4, "offset": 73}}], "skipped_rules": [], "version": "1.90.0"}
